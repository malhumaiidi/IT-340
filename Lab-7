class Node:

    def __init__(self,value):

        self.left = None

        self.right = None

        self.val = value

    #insert Value into the appropiate spot in the tree

def insert(root, node):

    if root is None:

        root=node

    elif root.val < node.val:

        if root.right is None:

            root.right = node

        else:

            insert(root.right, node)

    else:

        if root.left is None:

            root.left = node

        else:

            insert(root.left, node)

def inorder_traversal(root):

    #finish code to print all values with an inorder traversal

    if root is not None:
        inorder_traversal(root.left)
        print(root.val)
        inorder_traversal(root.right)

def preorder_traversal(root):
    if root is not None:
        print(root.val)
        preorder_traversal(root.left)
        preorder_traversal(root.right)

def postorder_traversal(root):
    if root is not None:
        postorder_traversal(root.left)
        postorder_traversal(root.right)
        print(root.val)

def search(root,n):
    if root is not None:
        # base case
        if root.val == n:
            return True
        else:
            # secondary cases
            if(root.val<n):
                return search(root.right,n)
            elif(root.val>n):
                return search(root.left,n)
            return False
    else:
        return False

bst = Node(5)

insert(bst,Node(2))

insert(bst,Node(7))

insert(bst,Node(10))

insert(bst,Node(4))

insert(bst,Node(1))

inorder_traversal(bst)
# print(search(bst, 4))
